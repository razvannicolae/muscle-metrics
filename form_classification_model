import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader, random_split
import matplotlib.pyplot as plt

# ---------------------------
# Frame-wise Dataset for SEMG & Classification Data
# ---------------------------
class FrameWiseSemgDataset(Dataset):
    def __init__(self, semg_file, class_file, num_frames=300):
        """
        Args:
            semg_file (str): Path to the SEMG NPZ file with keys like "0", "1", etc.
            class_file (str): Path to the classification NPZ file with one key "arr_0".
            num_frames (int): Number of frames to use per session.
        """
        # Load SEMG data (multiple sessions, keys: "0", "1", ...)
        self.semg_npz = np.load(semg_file)
        # Sort session keys numerically.
        self.sem_keys = sorted(list(self.semg_npz.keys()), key=lambda x: int(x))
        
        # Load classification data (one key "arr_0")
        class_npz = np.load(class_file)
        self.class_array = class_npz['arr_0']  # Expected shape: (num_sessions, 3)
        # Build a dictionary mapping session number to [proper, poor] target.
        self.class_dict = {}
        for row in self.class_array:
            session_num = int(row[0])
            proper = row[1]
            poor = row[2]
            self.class_dict[session_num] = [proper, poor]
        
        self.num_frames = num_frames
        self.num_sessions = len(self.sem_keys)
        self.total_samples = self.num_sessions * self.num_frames

    def __len__(self):
        return self.total_samples

    def __getitem__(self, idx):
        # Determine the session and frame index.
        session_idx = idx // self.num_frames
        frame_idx = idx % self.num_frames

        # Load the SEMG session data.
        semg_session = self.semg_npz[self.sem_keys[session_idx]]
        if semg_session.shape[0] < self.num_frames:
            raise ValueError(f"Session {self.sem_keys[session_idx]} does not have {self.num_frames} frames in SEMG data.")
        # Extract the first column value for the given frame.
        input_val = semg_session[frame_idx, 0]
        
        # Look up the classification target for this session.
        session_num = int(self.sem_keys[session_idx])
        if session_num not in self.class_dict:
            raise ValueError(f"Session {session_num} not found in classification data.")
        target_val = self.class_dict[session_num]  # [proper, poor]

        # Convert to torch tensors.
        input_tensor = torch.tensor([input_val], dtype=torch.float32)  # shape: (1,)
        target_tensor = torch.tensor(target_val, dtype=torch.float32)   # shape: (2,)
        return input_tensor, target_tensor

# ---------------------------
# Model Architecture (Unchanged)
# ---------------------------
class EMGClassifier(nn.Module):
    def __init__(self):
        super(EMGClassifier, self).__init__()
        self.fc1 = nn.Linear(1, 64)    # Input layer: 1 feature per frame
        self.fc2 = nn.Linear(64, 64)   # Hidden layer 1
        self.fc3 = nn.Linear(64, 64)   # Hidden layer 2
        self.fc4 = nn.Linear(64, 64)   # Hidden layer 3
        self.fc_out = nn.Linear(64, 2) # Output layer: 2 values ([proper, poor])
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()    # To constrain outputs between 0 and 1

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.relu(self.fc3(x))
        x = self.relu(self.fc4(x))
        x = self.sigmoid(self.fc_out(x))
        return x

# ---------------------------
# Data Preparation and Split
# ---------------------------
semg_file = 'data/semg_data.npz'
class_file = 'data/classification_data.npz'
dataset = FrameWiseSemgDataset(semg_file, class_file, num_frames=300)

# Split dataset into training (70%), validation (15%), and testing (15%) sets.
dataset_length = len(dataset)
train_size = int(0.7 * dataset_length)
val_size = int(0.15 * dataset_length)
test_size = dataset_length - train_size - val_size
train_dataset, val_dataset, test_dataset = random_split(dataset, [train_size, val_size, test_size])

# Create DataLoaders.
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# ---------------------------
# Training Setup
# ---------------------------
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = EMGClassifier().to(device)
criterion = nn.MSELoss()  # MSE Loss since targets are 0 or 1
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
num_epochs = 50

train_losses = []
val_losses = []

for epoch in range(num_epochs):
    # Training Phase
    model.train()
    running_train_loss = 0.0
    for inputs, targets in train_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        running_train_loss += loss.item()
    avg_train_loss = running_train_loss / len(train_loader)
    train_losses.append(avg_train_loss)
    
    # Validation Phase
    model.eval()
    running_val_loss = 0.0
    with torch.no_grad():
        for inputs, targets in val_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            running_val_loss += loss.item()
    avg_val_loss = running_val_loss / len(val_loader)
    val_losses.append(avg_val_loss)
    
    print(f"Epoch {epoch+1}/{num_epochs} - Train Loss: {avg_train_loss:.4f} - Val Loss: {avg_val_loss:.4f}")

# ---------------------------
# Testing Phase
# ---------------------------
model.eval()
running_test_loss = 0.0
with torch.no_grad():
    for inputs, targets in test_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        running_test_loss += loss.item()
avg_test_loss = running_test_loss / len(test_loader)
print(f"Test Loss: {avg_test_loss:.4f}")

# ---------------------------
# Plotting Loss Curves
# ---------------------------
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label="Train Loss")
plt.plot(val_losses, label="Validation Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.title("Training and Validation Loss Over Epochs")
plt.show()

# Save the trained model.
torch.save(model.state_dict(), 'emg_classifier_model.pth')
print("Model saved as emg_classifier_model.pth")